pragma solidity ^0.4.24;

import "../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol";

contract FlightSuretyData {
    using SafeMath for uint256;

    /********************************************************************************************/
    /*                                       DATA VARIABLES                                     */
    /********************************************************************************************/
    // Account used to deploy contract
    address private contractOwner;                                      
    // Blocks all state changes throughout the contract if false
    bool private operational = true;
    //minimum airline fund for registration
    uint256 minAirlineFund = 10 ether; 
    //maximum passenger purchase
    uint256 maxPurchase = 1 ether;
    //totalNumber of regisrtered airlines
    uint256 totalAirlines = 0;

    struct Airline {
        string name;
        address airAddress;
        bool isRegistered;
        bool funded;
        bool isApproved;
        uint256 votes;

    }
    struct Insurance {
        address airline;
        address passenger;
        uint256 amount;
        bool claimed;
    }
    struct Flight{
        string id;
        string from;
        string to;
        address airline;
        bool isRegistered;
    }

    struct Passenger {
        address passengerAddress;
        //bought Insurance
        mapping(string => uint256) boughtFlight;
        uint256 amount;
    }

    //mapping address of airline to Airline struct 
    mapping(address => Airline) private Airlines;  
    //mapping key of insurance to Insurance struct                               
    mapping(bytes32 => Insurance) private Insurances;
    //mapping insurance key to array of insurees
    mapping(bytes32 => address[]) private flightInsurances;
    //mapping of funds to address of insurees
    mapping(address => uint256) private reimbursemantAmount;
    //mapping flightKey to Flight struct
    mapping(bytes32 => Flight) private Flights;
    //mapping address of Authorized airlines to true/false status
    mapping(address => uint8) private authorizedAddresses;
    //only authorized airlines can register airlines
    mapping(address => uint256) private votes;
    //mapping address of airline to passengers struct
    mapping(address => Passenger) private Passengers;

    address[] public PassengerAddresses;
    Passenger[] passengers;




    /********************************************************************************************/
    /*                                       EVENT DEFINITIONS                                  */
    /********************************************************************************************/


    /**
    * @dev Constructor
    *      The deploying account becomes contractOwner
    */
    constructor
                                (
                                )
                                public
                                 
    {
        contractOwner = msg.sender;
        authorizedAddresses[contractOwner] = 1;
        Airlines[contractOwner] = Airline({
            name: "firstAirlineName",
            airAddress: contractOwner,
            isRegistered: true,
            isApproved: false,
            funded: false,
            votes: 0
        });
        totalAirlines.add(1);
    }

    /********************************************************************************************/
    /*                                       FUNCTION MODIFIERS                                 */
    /********************************************************************************************/

    // Modifiers help avoid duplication of code. They are typically used to validate something
    // before a function is allowed to be executed.

    /**
    * @dev Modifier that requires the "operational" boolean variable to be "true"
    *      This is used on all state changing functions to pause the contract in 
    *      the event there is an issue that needs to be fixed
    */
    modifier requireIsOperational() 
    {
        require(operational, "Contract is currently not operational");
        _;  // All modifiers require an "_" which indicates where the function body will be added
    }

    /**
    * @dev Modifier that requires the "ContractOwner" account to be the function caller
    */
    modifier requireContractOwner()
    {
        require(msg.sender == contractOwner, "Caller is not contract owner");
        _;
    }

    /**
    * @dev Modifier that requires the "authorizedAirline" address to be the function caller
    */
    modifier requireAuthorization()
    {
        require(authorizedAddresses[msg.sender] == 1, "Caller is not an authorized Airline owner");
        _;
        }
    

    /********************************************************************************************/
    /*                                       UTILITY FUNCTIONS                                  */
    /********************************************************************************************/

    /**
    * @dev Get operating status of contract
    *
    * @return A bool that is the current operating status
    */      
    function isOperational() 
                            public 
                            view 
                            returns(bool) 
    {
        return operational;
    }


    /**
    * @dev Sets contract operations on/off
    *
    * When operational mode is disabled, all write transactions except for this one will fail
    */    
    function setOperatingStatus
                            (
                                bool mode
                            ) 
                            external
                            requireContractOwner 
    {
        operational = mode;
    }


    function authorizeAddress
                            (
                                address airlineAddress
                            )
                            external
                            requireContractOwner
    {
        authorizedAddresses[airlineAddress] = 1;
    }

    function deauthorizeAddress
                            (
                                address airlineAddress
                            )
                            external
                            requireContractOwner
    {
        delete authorizedAddresses[airlineAddress];
    }
    /********************************************************************************************/
    /*                                     SMART CONTRACT FUNCTIONS                             */
    /********************************************************************************************/

     
    function vote (address airline) public requireIsOperational requireAuthorization returns(bool) {
        bool voteComplete = false;
        Airlines[airline].votes++;
        if (Airlines[airline].votes >= totalAirlines.div(2)) {
                    voteComplete = true;
        }
        require(voteComplete, "Number of votes not reached");
        return voteComplete;
    }
    /**
    * @dev Add an airline to the registration queue
    *      Can only be called from FlightSuretyApp contract
    *
    */ 
    function registerAirline
                            (   
                                address airlineAddress, string airlineName
                            )
                            external
                            requireIsOperational
                            requireAuthorization
                            returns(bool)
    {
        require(airlineAddress != address(0), "'airlineAddress' must be a valid address.");
        require(!Airlines[airlineAddress].isRegistered, "Airline is already registered.");

        if(totalAirlines < 4){
        Airlines[airlineAddress] = Airline({
            name: airlineName,
            airAddress: airlineAddress,
            isRegistered: true,
            isApproved: false,
            funded: false,
            votes: 0
        });
        totalAirlines.add(1);
        } else{
            require(vote(airlineAddress), "Airline has not reached required votes");
            Airlines[airlineAddress] = Airline({
                name: airlineName,
                airAddress: airlineAddress,
                isRegistered: true,
                isApproved: false,
                funded: false,
                votes: getVotes(airlineAddress)
        });

        }
        return true;
    }

    function getVotes(address airline) public view returns (uint256 airlineVotes) {
        return (Airlines[airline].votes);
    }



   /**
    * @dev Buy insurance for a flight
    *
    */   
    function buy
                            ( 
                                string flightID, 
                                address airline, 
                                uint256 timestamp, 
                                uint256 insAmount                          
                            )
                            external
                            payable
                            requireIsOperational
    {
        require(msg.sender == tx.origin, "Contracts not allowed");
        require(msg.value > 0, 'You need to pay to buy a flight insurance');
        require(Airlines[airline].isApproved, "Airline must be approved");
        address passenger = msg.sender;
        timestamp = now;
        bytes32 flightKey = getFlightKey(airline, flightID, timestamp);
        bytes32 insuranceKey = keccak256(abi.encodePacked(flightKey, passenger));
        Insurances[insuranceKey] = Insurance({
            id: insuranceKey,
            owner: passenger,
            amount: insAmount,
            isRefunded: false
        });
        flightInsurances[flightKey].push(passenger);

        PassengerAddresses.push(msg.sender);
        if (Passengers[msg.sender].passengerAddress != msg.sender) {
            

            Passengers[msg.sender] = Passenger({
                                                passengerAddress: msg.sender,
                                                amount: 0
                                        });
            Passengers[msg.sender].boughtFlight[flightID] = msg.value;
        } else {
            Passengers[msg.sender].boughtFlight[flightID] = msg.value;
        }
        if (msg.value > maxPurchase) {
            msg.sender.transfer(msg.value.sub(maxPurchase));
        }

    }

    /**
     *  @dev Credits payouts to insurees
    */
    function creditInsurees
                                (
                                    string flightID
                                )
                                external
                                requireAuthorization
    {
        Passengers[msg.sender] = Passenger({
                                                passengerAddress: msg.sender,
                                                amount: Passengers[msg.sender].boughtFlight[flightID].mul(3).div(2)
                                        });
            
    }
    

    /**
     *  @dev Transfers eligible payout funds to insuree
     *
    */
    function pay
                            (
                                address passenger
                            )
                            external
                            payable
    {
        require(Passengers[passenger].amount > 0, "You are not eligible for insurance");
        uint256 payment = Passengers[passenger].amount;
        
        passenger.transfer(amount);
    }

   /**
    * @dev Initial funding for the insurance. Unless there are too many delayed flights
    *      resulting in insurance payouts, the contract should be self-sustaining
    *
    */   
    function fund
                            (   
                            )
                            external
                            payable
                            requireIsOperational
    {

        require(Airlines[msg.sender].isRegistered == true, "Airline should be registered before funding");
        require(Airlines[msg.sender].funded == false, "Airline is already funded");
        require(msg.value >= minAirlineFund, "Minimum fund required is 10 Ether");

        Airlines[msg.sender].funded = true;
        Airlines[msg.sender].isApproved = true;
    }

    function getFlightKey
                        (
                            address airline,
                            string memory flight,
                            uint256 timestamp
                        )
                        pure
                        internal
                        returns(bytes32) 
    {
        return keccak256(abi.encodePacked(airline, flight, timestamp));
    }

    function getAirline(address airlineAddress) public view requireIsOperational 
    returns (string name,
            address airAddress,
            bool isRegistered,
            bool funded,
            bool isApproved) 
    {

        string memory name;
        address airAddress;
        bool isRegistered;
        bool funded;
        bool isApproved;
        uint256 votes;
        Airline memory airline = Airlines[airlineAddress];
        return (
            airline.name,
            airline.airAddress,
            airline.isRegistered,
            airline.funded,
            airline.isApproved
        );
    }
    /**
    * @dev Fallback function for funding smart contract.
    *
    */
   function() 
                            external 
                            payable 
    {
        //fund();
    }


}

